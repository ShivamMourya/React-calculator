{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","result","setResult","btnClicked","e","concat","target","name","clear","backSpace","slice","length","calculate","eval","toString","error","className","type","value","onClick","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"szBAGA,SAASA,MACP,cAA4BC,oDAAS,IAArC,6IAAOC,OAAP,cAAeC,UAAf,cAEMC,WAAa,SAACC,GAClBF,UAAUD,OAAOI,OAAOD,EAAEE,OAAOC,QAG7BC,MAAQ,WACZN,UAAU,KAGNO,UAAY,WAChBP,UAAUD,OAAOS,MAAM,EAAGT,OAAOU,OAAS,KAGtCC,UAAY,SAAZA,YACJ,IACEV,UAAUW,KAAKZ,QAAQa,YACvB,MAAOC,OACPb,UAAU,WAId,OACE,6HACE,mEAAKc,UAAU,YAAf,UACE,4EACE,oEAAOC,KAAK,OAAOC,MAAOjB,WAE5B,mEAAKe,UAAU,SAAf,UACE,qEAAQT,KAAK,IAAIY,QAAShB,WAA1B,eAGA,qEAAQI,KAAK,IAAIY,QAAShB,WAA1B,eAGA,qEAAQI,KAAK,IAAIY,QAAShB,WAA1B,eAGA,qEAAQa,UAAU,WAAWT,KAAK,IAAIY,QAAShB,WAA/C,eAGA,qEAAQI,KAAK,IAAIY,QAAShB,WAA1B,eAGA,qEAAQI,KAAK,IAAIY,QAAShB,WAA1B,eAGA,qEAAQI,KAAK,IAAIY,QAAShB,WAA1B,eAGA,qEAAQa,UAAU,WAAWT,KAAK,IAAIY,QAAShB,WAA/C,oBAGA,qEAAQI,KAAK,IAAIY,QAAShB,WAA1B,eAGA,qEAAQI,KAAK,IAAIY,QAAShB,WAA1B,eAGA,qEAAQI,KAAK,IAAIY,QAAShB,WAA1B,eAGA,qEAAQa,UAAU,WAAWT,KAAK,IAAIY,QAAShB,WAA/C,kBAGA,qEAAQiB,GAAG,YAAYD,QAASV,UAAhC,kBAGA,qEAAQF,KAAK,IAAIY,QAAShB,WAA1B,eAGA,qEAAQI,KAAK,IAAIY,QAAShB,WAA1B,eAGA,qEAAQa,UAAU,WAAWT,KAAK,IAAIY,QAAShB,WAA/C,kBAIA,qEAAQgB,QAASX,MAAOY,GAAG,QAA3B,eAGA,qEAAQb,KAAK,IAAIa,GAAG,QAAQD,QAASP,UAArC,uBASKb,2B,iIClFAsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjC,EAAA,EAAD,MAEFkC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.18acf287.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState } from \"react\";\n\nfunction App() {\n  const [result, setResult] = useState(\"\");\n\n  const btnClicked = (e) => {\n    setResult(result.concat(e.target.name));\n  };\n\n  const clear = () => {\n    setResult(\"\");\n  };\n\n  const backSpace = () => {\n    setResult(result.slice(0, result.length - 1)); // Or direct - 1\n  };\n\n  const calculate = () => {\n    try {\n      setResult(eval(result).toString());\n    } catch (error) {\n      setResult(\"error\");\n    }\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <form>\n          <input type=\"text\" value={result} />\n        </form>\n        <div className=\"keypad\">\n          <button name=\"7\" onClick={btnClicked}>\n            7\n          </button>\n          <button name=\"8\" onClick={btnClicked}>\n            8\n          </button>\n          <button name=\"9\" onClick={btnClicked}>\n            9\n          </button>\n          <button className=\"tasksBtn\" name=\"+\" onClick={btnClicked}>\n            +\n          </button>\n          <button name=\"4\" onClick={btnClicked}>\n            4\n          </button>\n          <button name=\"5\" onClick={btnClicked}>\n            5\n          </button>\n          <button name=\"6\" onClick={btnClicked}>\n            6\n          </button>\n          <button className=\"tasksBtn\" name=\"-\" onClick={btnClicked}>\n            &ndash;\n          </button>\n          <button name=\"1\" onClick={btnClicked}>\n            1\n          </button>\n          <button name=\"2\" onClick={btnClicked}>\n            2\n          </button>\n          <button name=\"3\" onClick={btnClicked}>\n            3\n          </button>\n          <button className=\"tasksBtn\" name=\"*\" onClick={btnClicked}>\n            &times;\n          </button>\n          <button id=\"backSpace\" onClick={backSpace}>\n            Back\n          </button>\n          <button name=\"0\" onClick={btnClicked}>\n            0\n          </button>\n          <button name=\".\" onClick={btnClicked}>\n            .\n          </button>\n          <button className=\"tasksBtn\" name=\"/\" onClick={btnClicked}>\n            &divide;\n          </button>\n\n          <button onClick={clear} id=\"clear\">\n            C\n          </button>\n          <button name=\"=\" id=\"equal\" onClick={calculate}>\n            =\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}